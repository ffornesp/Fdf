ALLOWED: math.h (man 3 math)
		 libft.h
		 ft_printf.h
		 get_next_line.h

Program name: 	fdf
Turn in files:	Makefile, *.h, *.c
Makefile:		NAME, all, clean, fclean, re
Arguments:		A file in format *.fdf
External fts:	open, close, read, write, malloc, free, perror, strerror, exit.
				All functions of the math library (-lm compiler option, man man 3 math)
				All functions of the MiniLibX
				ft_printf and any equivalent YOU coded
				Libft
Description:	This projects is about creating a simple wireframe model of a landscape.

Requirements:	Makefile must not relink.
				Global variables are forbidden.
				Your program has to represent the model in isometric projection.
				The coordinates of the landscape are stored in a .fdf file passed as a parameter to your program.
				Each number represents a point in space:
					Horizontal pos corresponds to it's axis.
					Vertical pos corresponds to it's ordinate.
					Value corresponds to it's altitude.
				Execution must be done like this: ./fdf file_name.fdf
				
Graphic mngmnt:	Your program has to display the image in a window.
				The management of your window must remain smooth (changing to another window, minimizing, and so forth).
				Pressing ESC must close the window and quit the program in a clean way.
				Clicking on the cross on the window's frame must close the window and quit the program in a clean way.
				The use of the images of the MiniLibX is mandatory.

	Remember to use your libft the best way you can! Using get_next_line(), ft_split() and other functions will allow 
		you to read data from the file in a quick and simple way.
	Keep in mind that the goal of this project is not to parse maps! However, this doesn't mean that your program
		should crash when run. It means that we assume the map contained in the file is porperly formatted.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
REMEMBER !!! mlx_put_image_to_window(vars->mlx, vars->win, data->img, X, Y);
			 my_mlx_pixel_put(data, X, Y, COLOR);

Rotate X Y with (x - y) * sin (120) 
				(x + y) * cos (120)
